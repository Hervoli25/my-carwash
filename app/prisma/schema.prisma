generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminUser {
  id               String          @id @default(cuid())
  username         String          @unique
  email            String          @unique
  password         String
  name             String
  role             String          @default("ADMIN")
  isActive         Boolean         @default(true)
  lastLoginAt      DateTime?
  failedLogins     Int             @default(0)
  lockedUntil      DateTime?
  twoFactorSecret  String?
  twoFactorEnabled Boolean         @default(false)
  allowedIPs       String[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  auditLogs        AdminAuditLog[]

  @@index([email])
  @@index([username])
  @@index([isActive])
}

model AdminAuditLog {
  id           String    @id @default(cuid())
  adminUserId  String
  action       String
  resourceType String
  resourceId   String?
  oldValue     String?
  newValue     String?
  ipAddress    String
  userAgent    String?
  createdAt    DateTime  @default(now())
  adminUser    AdminUser @relation(fields: [adminUserId], references: [id])

  @@index([adminUserId])
  @@index([action])
  @@index([createdAt])
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String?
  name           String?
  firstName      String?
  lastName       String?
  phone          String?
  dateOfBirth    DateTime?
  gender         Gender?
  address        String?
  city           String?
  province       String?
  language       String?         @default("English")
  profileImage   String?
  isAdmin        Boolean         @default(false)
  loyaltyPoints  Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  bookings       Booking[]
  membership     Membership?
  notifications  Notification[]
  paymentMethods PaymentMethod[]
  reviews        Review[]
  sessions       Session[]
  stripeCustomer StripeCustomer?
  vehicles       Vehicle[]
  receipts       Receipt[]
  waitlists      Waitlist[]

  @@index([email])
  @@index([isAdmin])
  @@index([loyaltyPoints])
  @@index([createdAt])
}

model StripeCustomer {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  stripeCustomerId       String   @unique
  email                  String?
  name                   String?
  phone                  String?
  defaultPaymentMethodId String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([email])
}

model Vehicle {
  id           String      @id @default(cuid())
  userId       String
  make         String
  model        String
  year         Int
  color        String
  licensePlate String      @unique
  vehicleType  VehicleType
  isPrimary    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  bookings     Booking[]
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([licensePlate])
  @@index([isPrimary])
}

model Service {
  id               String          @id @default(cuid())
  name             String          @unique
  description      String
  shortDesc        String
  price            Int
  duration         Int
  category         ServiceCategory
  features         String[]
  isActive         Boolean         @default(true)
  rating           Float           @default(0)
  reviewCount      Int             @default(0)
  imageUrl         String?
  isPromoted       Boolean         @default(false)
  promotionPrice   Int?
  promotionEndDate DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  bookings         Booking[]
  reviews          Review[]
  addOns           ServiceAddOn[]
  waitlists        Waitlist[]

  @@index([category])
  @@index([isActive])
  @@index([price])
  @@index([rating])
}

model ServiceAddOn {
  id             String         @id @default(cuid())
  serviceId      String
  name           String
  description    String
  price          Int
  isActive       Boolean        @default(true)
  imageUrl       String?
  isPromoted     Boolean        @default(false)
  promotionPrice Int?
  createdAt      DateTime       @default(now())
  bookingAddOns  BookingAddOn[]
  service        Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
  @@index([isActive])
  @@index([price])
}

model Booking {
  id                 String         @id @default(cuid())
  userId             String
  serviceId          String
  vehicleId          String
  bookingDate        DateTime
  timeSlot           String
  status             BookingStatus  @default(CONFIRMED)
  totalAmount        Int
  baseAmount         Int
  addOnAmount        Int            @default(0)
  notes              String?
  cancellationReason String?
  cancelledAt        DateTime?
  completedAt        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  service            Service        @relation(fields: [serviceId], references: [id])
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle            Vehicle        @relation(fields: [vehicleId], references: [id])
  addOns             BookingAddOn[]
  payment            Payment?
  receipt            Receipt?

  @@index([userId])
  @@index([serviceId])
  @@index([vehicleId])
  @@index([bookingDate])
  @@index([status])
  @@index([createdAt])
}

model BookingAddOn {
  id        String       @id @default(cuid())
  bookingId String
  addOnId   String
  quantity  Int          @default(1)
  price     Int
  addOn     ServiceAddOn @relation(fields: [addOnId], references: [id])
  booking   Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([addOnId])
}

model PaymentMethod {
  id                    String            @id @default(cuid())
  userId                String
  type                  PaymentMethodType
  lastFour              String?
  expiryMonth           Int?
  expiryYear            Int?
  cardholderName        String?
  isDefault             Boolean           @default(false)
  isActive              Boolean           @default(true)
  stripePaymentMethodId String?
  stripeBrand           String?
  stripeFingerprint     String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  payments              Payment[]
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
  @@index([isActive])
  @@index([stripePaymentMethodId])
}

model Payment {
  id                    String         @id @default(cuid())
  bookingId             String?        @unique
  paymentMethodId       String?
  amount                Int
  status                PaymentStatus  @default(PENDING)
  transactionId         String?
  paymentDate           DateTime?
  paymentMethodType     String?
  stripePaymentIntentId String?
  stripeChargeId        String?
  stripeCustomerId      String?
  stripeFee             Int?
  stripeReceiptUrl      String?
  currency              String         @default("ZAR")
  description           String?
  failureReason         String?
  refundReason          String?
  refundedAmount        Int?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  booking               Booking?       @relation(fields: [bookingId], references: [id])
  paymentMethod         PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([status])
  @@index([paymentDate])
  @@index([transactionId])
  @@index([stripePaymentIntentId])
  @@index([stripeChargeId])
  @@index([stripeCustomerId])
  @@index([createdAt])
}

model Membership {
  id        String         @id @default(cuid())
  userId    String         @unique
  plan      MembershipPlan
  price     Int
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean        @default(true)
  autoRenew Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([plan])
  @@index([isActive])
  @@index([startDate])
  @@index([endDate])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  rating    Int
  comment   String?
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
  @@index([userId])
  @@index([serviceId])
  @@index([rating])
  @@index([isVisible])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Promotion {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  title              String
  description        String?
  discountType       String
  discountValue      Decimal   @db.Decimal(10, 2)
  minPurchaseAmount  Decimal?  @default(0) @db.Decimal(10, 2)
  maxDiscountAmount  Decimal?  @db.Decimal(10, 2)
  startDate          DateTime  @db.Date
  endDate            DateTime  @db.Date
  isActive           Boolean?  @default(true)
  usageLimit         Int?
  usedCount          Int?      @default(0)
  applicableServices String[]
  targetCustomers    String[]
  promoCode          String?   @unique
  mediaUrl           String?
  mediaType          String?
  createdBy          String
  createdAt          DateTime? @default(now()) @db.Timestamp(6)
  updatedAt          DateTime? @default(now()) @db.Timestamp(6)
}

model Waitlist {
  id                String        @id @default(cuid())
  userId            String
  customerName      String
  email             String
  phone             String
  serviceId         String
  preferredDate     DateTime
  preferredTime     String?
  vehicleInfo       String?
  alternativeTimes  String[]      @default([])
  status            WaitlistStatus @default(ACTIVE)
  priority          Int           @default(1)
  notificationsSent Int           @default(0)
  notifiedAt        DateTime?
  bookedAt          DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  service           Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([serviceId])
  @@index([status])
  @@index([preferredDate])
  @@index([priority])
  @@index([createdAt])
}

enum VehicleType {
  SEDAN
  SUV
  HATCHBACK
  BAKKIE
  COUPE
  CONVERTIBLE
  WAGON
  TRUCK
}

enum ServiceCategory {
  EXPRESS
  PREMIUM
  DELUXE
  EXECUTIVE
}

enum BookingStatus {
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethodType {
  VISA
  MASTERCARD
  AMERICAN_EXPRESS
  DISCOVERY
  CASH
  EFT
  STRIPE_CARD
  STRIPE_WALLET
}

enum WaitlistStatus {
  ACTIVE
  CONTACTED
  BOOKED
  CANCELLED
  EXPIRED
}

enum MembershipPlan {
  BASIC
  PREMIUM
  ELITE
}

enum NotificationType {
  BOOKING
  PROMOTION
  REMINDER
  SYSTEM
  PAYMENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model Receipt {
  id              String   @id @default(cuid())
  receiptNumber   String   @unique // Format: RCT-XXXXXXXX
  bookingId       String   @unique
  userId          String
  customerName    String   // Full name at time of receipt generation
  customerEmail   String   // Email at time of receipt generation
  customerPhone   String?  // Phone at time of receipt generation
  
  // Service details at time of receipt
  serviceName     String
  serviceCategory String
  vehiclePlate    String
  vehicleDetails  String   // JSON: {make, model, year, color}
  
  // Financial details
  baseAmount      Int      // Base service amount in cents
  addOnAmount     Int      // Add-on services amount in cents
  totalAmount     Int      // Total amount in cents
  paymentMethod   String?  // Payment method used
  paymentStatus   String   // Payment status at time of receipt
  
  // Receipt metadata
  receiptData     String   // JSON: Complete receipt data for reconstruction
  generatedAt     DateTime @default(now())
  downloadedAt    DateTime? // Track when receipt was downloaded
  downloadCount   Int      @default(0) // How many times downloaded
  emailedAt       DateTime? // Track when receipt was emailed
  emailCount      Int      @default(0) // How many times emailed
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  // Indexes for performance and search
  @@index([receiptNumber])
  @@index([userId])
  @@index([bookingId])
  @@index([customerName])
  @@index([customerEmail])
  @@index([vehiclePlate])
  @@index([generatedAt])
  @@index([paymentStatus])
}
